apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'jacoco'

ext.versionMajor = 4
ext.versionMinor = 3
ext.versionPatch = 0
ext.postfix = ''

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

test {
    jvmArgs "-javaagent:${configurations.codeCoverage.singleFile}=destfile=${buildDirName}/coverage-results/jacoco.exec,sessionid=HSServ,append=false",
            'Djacoco=true',
            '-Xms128m',
            '-Xmx512m',
            '-XX:MaxPermSize=128m'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
        applicationId 'ua.napps.scorekeeper'
        minSdkVersion 19
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        versionCode generateVersionCode()
        versionName generateVersionName()
        resConfigs "en", "ru", "uk", "fr", "de", "es"

        manifestPlaceholders += [
                crashlyticsEnabled: false
        ]
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

//    signingConfigs {
//        release {
//            storeFile new File(STORE_FILE)
//            storePassword STORE_PASSWORD
//            keyAlias KEY_ALIAS
//            keyPassword KEY_PASSWORD
//        }
//    }

    buildTypes {
        debug {
            multiDexEnabled true
            testCoverageEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
            manifestPlaceholders += [crashlyticsEnabled: true]
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        //unitTests.returnDefaultValues = true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.room:room-runtime:2.1.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'com.google.firebase:firebase-core:16.0.5'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.6@aar') {
        transitive = true
    }
    implementation('com.github.fernandodev.easyratingdialog:easyratingdialog:1.1.2') {
        exclude module: 'material-dialogs'
    }
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.ashokvarma.android:bottom-navigation-bar:2.1.0'

    //testImplementation 'junit:junit:4.12'
    //testImplementation 'org.hamcrest:hamcrest-all:1.3'
    // //androidTestImplementation 'androidx.test:runner:1.1.0'
    //androidTestImplementation "androidx.test.ext:junit:1.0.0"
    //androidTestImplementation 'androidx.test:rules:1.1.0'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.7.1'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    //androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation "androidx.test.ext:junit:1.0.0"

    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestUtil 'androidx.test:orchestrator:1.1.0'

    testImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation 'org.mockito:mockito-android:2.22.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"


    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.1.0-alpha02'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "$supportLibraryVersion"
            }
        }
    }
}

def generateVersionCode() {
    return ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

def generateVersionName() {
    return "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}${ext.postfix}"
}


apply plugin: 'com.google.gms.google-services'
repositories {
    mavenCentral()
}
